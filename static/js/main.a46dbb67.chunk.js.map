{"version":3,"sources":["components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","images/tr.png","components/SettingsBtn/SettingsBtn.module.css","components/Timer/Timer.module.css","audio/bell.flac","components/InfoBtn/InfoBtn.module.css","components/Header.js","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","components/Timer/index.jsx","store/action.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","Header","className","src","pic","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","fontSize","Settings","title","active","onChange","backdrop","modal","content","InfoBtn","Info","Timer","state","useSelector","dispatch","useDispatch","useEffect","localStorage","setItem","JSON","stringify","useState","workTime","pomodoroInterval","setPomodoroInterval","shortBreak","shortBrake","setShortBrake","longBreak","longBrake","setLongBreak","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","blueBg","allowEnterKey","confirmButtonColor","redBg","minutes","floor","seconds","onModal","onInfo","document","body","classList","remove","add","total","getProgress","test","Button","size","variant","console","log","TextField","id","type","fullWidth","value","e","target","FormControlLabel","control","Checkbox","checked","label","color","obj","App","Boolean","window","location","hostname","match","localPomodorState","parse","getItem","initialState","store","createStore","action","parseInt","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,wBAAwB,MAAQ,0B,mBCAhGD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,MAAQ,oBAAoB,MAAQ,sB,mBCDxFD,EAAOC,QAAU,IAA0B,gC,mBCC3CD,EAAOC,QAAU,CAAC,IAAM,2B,mBCAxBD,EAAOC,QAAU,CAAC,KAAO,sB,mBCDzBD,EAAOC,QAAU,IAA0B,mC,mBCC3CD,EAAOC,QAAU,CAAC,IAAM,qBAAqB,KAAO,wB,kOCerCC,G,MAZA,WAGb,OACE,4BAAQC,UAAU,cAChB,yBAAKC,IAAKC,MACV,uCACA,6D,QC+BSC,G,MAvCK,SAACC,GACnB,IAGMC,EAAgBC,IAAuBC,KAAKC,GAC5CC,EACJJ,EAAiBD,EAAMM,SAAW,IAAOL,EAE3C,OACE,yBAAKL,UAAU,eACb,yBAAKW,MAAM,OAAOC,QAAO,cAASC,IAAT,YAAuBA,MAC9C,4BACEC,OAAO,UACPC,KAAK,OACLC,YAZO,GAaPC,EAZiBJ,IAajBK,GAfO,IAgBPC,GAhBO,MAkBT,4BACEL,OAAO,OACPC,KAAK,cACLC,YApBO,GAqBPI,gBAAiBf,EAAgB,IAAMA,EACvCgB,MAAO,CAAEZ,oBACTQ,EAtBiBJ,IAuBjBK,GAzBO,IA0BPC,GA1BO,OA6BX,6BACE,6CACA,yBAAKnB,UAAU,SACdI,EAAMkB,a,kCCxBAC,EARK,SAACnB,GACjB,OACI,4BAAQoB,QAASpB,EAAMqB,QAASzB,UAAW0B,IAAIC,KAC3C,kBAAC,IAAD,CAAcC,SAAS,Y,iBCUpBC,MAdf,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,OAAQT,EAAsB,EAAtBA,SACjC,OADuD,EAAZU,SACtCD,EAIH,yBAAK/B,UAAW0B,IAAIO,UAClB,yBAAKjC,UAAW0B,IAAIQ,OACjBJ,GAAS,wBAAI9B,UAAW0B,IAAII,OAAQA,GACrC,yBAAK9B,UAAW0B,IAAIS,SAAUb,KAN3B,M,qFCOIc,EARC,SAAChC,GACb,OACI,4BAAQoB,QAASpB,EAAMqB,QAASzB,UAAW0B,IAAIC,KAC3C,kBAAC,IAAD,CAAUC,SAAS,Y,iBCUhBS,MAdf,YAAsD,IAAtCP,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,OAAQT,EAAsB,EAAtBA,SAC7B,OADmD,EAAZU,SAClCD,EAIH,yBAAK/B,UAAW0B,IAAIO,UAClB,yBAAKjC,UAAW0B,IAAIQ,OACjBJ,GAAS,wBAAI9B,UAAW0B,IAAII,OAAQA,GACrC,yBAAK9B,UAAW0B,IAAIS,SAAUb,KAN3B,M,4CCuUIgB,MA9Tf,WAEC,IAAMC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAC/BE,EAAWC,cAEhBC,qBAAU,WACRC,aAAaC,QAAQ,eAAgBC,KAAKC,UAAUR,MACpD,CAACA,IAPY,MAUgCS,mBAAST,EAAMU,UAV/C,mBAUTC,EAVS,KAUSC,EAVT,OAWoBH,mBAAST,EAAMa,YAXnC,mBAWTC,EAXS,KAWGC,EAXH,OAYkBN,mBAAST,EAAMgB,WAZjC,mBAYTC,EAZS,KAYEC,EAZF,OAakBT,mBAAST,EAAMmB,WAbjC,mBAaTA,EAbS,KAaEC,EAbF,OAcgBX,oBAAS,GAdzB,mBAcTY,EAdS,KAcCC,EAdD,OAiBDb,mBAAS,IAAIc,MAAMC,MAA3BC,EAjBS,sBAoBQhB,mBAA4B,GAAnBE,GApBjB,mBAoBTe,EApBS,KAoBHC,EApBG,OAqBgBlB,mBAAS,GArBzB,mBAqBTmB,EArBS,KAqBCC,EArBD,OAsBgBpB,oBAAS,GAtBzB,mBAsBTqB,EAtBS,KAsBCC,EAtBD,OAuBoBtB,mBAAS,SAvB7B,mBAuBTuB,GAvBS,KAuBGC,GAvBH,QAwBsBxB,oBAAS,GAxB/B,qBAwBTyB,GAxBS,MAwBIC,GAxBJ,SA2BgB1B,oBAAS,GA3BzB,qBA2BT2B,GA3BS,MA2BCC,GA3BD,SA4BQ5B,oBAAS,GA5BjB,qBA4BT6B,GA5BS,MA4BHC,GA5BG,SA+BkB9B,mBAASE,GA/B3B,qBA+BT6B,GA/BS,MA+BEC,GA/BF,MAiChBrC,qBAAU,WACL8B,IACgB,UAAfF,KACU,IAATN,EACHgB,YAAW,WACVf,EAAQD,EAAO,KACb,MAEHD,EAAKkB,OAeT,WACC,IACIC,EACAC,EAFAC,EAAgBlB,EAGhBA,EAAWT,IAAcW,GAC5Bc,EAAW9B,EACX+B,GAAO,EACPJ,GAAa3B,IAEA,IAAbO,GACC0B,IAAKC,KAAK,CACTzD,MAAO,sBACP0D,mBAAmB,EACnBC,OAAQ,WACPjB,GAAc,aAEfkB,QAAS,WACRlB,GAAc,SACdmB,MAEDC,eAAe,EACfC,mBAAoB,SAEZ1B,EAAWT,GAAaW,GAClCgB,EAAgBlB,EAAW,EAC3BgB,EAAWjC,EACXkC,GAAO,EACPJ,GAAa9B,IAEA,IAAbU,GACC0B,IAAKC,KAAK,CACTzD,MAAO,eACP0D,mBAAmB,EACnBC,OAAQ,WACPjB,GAAc,aAEfkB,QAAS,WACRlB,GAAc,SACdsB,MAEDF,eAAe,EACfC,mBAAoB,UAEZ1B,GAAYT,IACtB2B,EAAgB,EAChBF,EAAW3B,EACX4B,GAAO,EACPJ,GAAaxB,GACbmC,MAEa,IAAb/B,GACC0B,IAAKC,KAAK,CACTzD,MAAO,iCACP0D,mBAAmB,EACnBC,OAAQ,WACPjB,GAAc,aAEfkB,QAAS,WACRlB,GAAc,UAEfoB,eAAe,EACfC,mBAAoB,SAGvBzB,EAAYiB,GACZnB,EAAmB,GAAXiB,GACRb,EAAYc,GAhFTC,QAMJ,IAKMU,GAAUxF,KAAKyF,MAAM/B,EAAO,IAC5BgC,GAAUhC,EAAiB,GAAV8B,GAwFjBG,GAAU,WACf,OAAOtB,IAAY,IAGduB,GAAS,WACd,OAAOrB,IAAQ,IAiBVa,GAAS,WACdS,SAASC,KAAKC,UAAUC,OAAO,WAC/BH,SAASC,KAAKC,UAAUE,IAAI,YAGvBV,GAAQ,WACbM,SAASC,KAAKC,UAAUC,OAAO,WAC/BH,SAASC,KAAKC,UAAUE,IAAI,YAG7B,OACC,6BACC,kBAAC,EAAD,CAAS/E,QAAS0E,KAClB,kBAAC,EAAD,CAAa1E,QAASyE,KAEtB,kBAAC,EAAD,CAAcjC,KAAMf,EAAkBxC,SA3CpB,WACnB,IACM+F,EAAoB,GAAZ1B,GACd,OAAS0B,EAFOxC,GAEYwC,EAAS,IAwCYC,IAC/C,wBAAI1G,UAAW0B,IAAIiF,MACjBZ,GAAU,GAAV,WAAmBA,IAAYA,GADjC,KAC4C,IAC1CE,GAAU,GAAV,WAAmBA,IAAYA,KAGlC,6BAECxB,GACA,6BACC,kBAACmC,EAAA,EAAD,CACCC,KAAK,QACLC,QAAQ,WACRtF,QAnEL,WAOCgD,GALmB,UAAfD,GACO,WAEA,WAgENA,IAEF,kBAACqC,EAAA,EAAD,CACCC,KAAK,QACL/E,MAAM,yBACNN,QA7CS,WACM,aAAf+C,KACHG,IAAe,GACfJ,GAAY,GACZJ,EAAoB,GAAZa,IACRP,GAAc,YAqCZ,UASD,kBAACoC,EAAA,EAAD,CAAQE,QAAQ,WAAWtF,QA7JhB,WACbuF,QAAQC,IAAI,QACZtC,IAAe,IA2J8BmC,KAAK,SAAhD,SAKD,kBAAC,EAAD,CAAU9E,OAAQ4C,GAAU3C,SAAUkE,IACrC,wCACA,yCACA,kBAACe,EAAA,EAAD,CACCC,GAAG,iBACHJ,QAAQ,WACRK,KAAK,SACLC,WAAS,EACTC,MAAOnE,EACPlB,SAAU,SAACsF,GACVnE,EAAoBmE,EAAEC,OAAOF,OAC7BnD,EAAyB,GAAjBoD,EAAEC,OAAOF,OACjBrC,GAAasC,EAAEC,OAAOF,UAIxB,4CACA,kBAACJ,EAAA,EAAD,CACCC,GAAG,iBACHJ,QAAQ,WACRM,WAAS,EACTC,MAAOhE,EACPrB,SAAU,SAACsF,GAAD,OAAOhE,EAAcgE,EAAEC,OAAOF,QACxCF,KAAK,WAGN,2CACA,kBAACF,EAAA,EAAD,CACCC,GAAG,iBACHJ,QAAQ,WACRM,WAAS,EACTC,MAAO7D,EACPxB,SAAU,SAACsF,GAAD,OAAO7D,EAAa6D,EAAEC,OAAOF,QACvCF,KAAK,WAGN,+CACA,kBAACF,EAAA,EAAD,CACCC,GAAG,iBACHJ,QAAQ,WACRM,WAAS,EACTC,MAAO3D,EACP1B,SAAU,SAACsF,GACV3D,EAAa2D,EAAEC,OAAOF,OACtBN,QAAQC,IAAI,UAEbG,KAAK,WAGN,kBAACK,EAAA,EAAD,CACCC,QACC,kBAACC,EAAA,EAAD,CACCC,QAAS/D,EACT5B,SAjHa,WAClB,OAAO6B,GAAaD,IAiHfyD,MAAM,aAGRO,MAAM,yCAEP,6BAEA,kBAAChB,EAAA,EAAD,CACCE,QAAQ,WACRD,KAAK,QACLgB,MAAM,UACNrG,QAAS,WACRiB,EChSgC,CAClC0E,KAHwB,eAIxBW,ID+RgB,CACZ5E,mBACAM,YACAH,aACAK,eAGFkB,IAAY,KAbd,WAoBD,kBAAC,EAAD,CAAM7C,OAAQ8C,GAAM7C,SAAUmE,IAC7B,wDADD,yJAKC,8CALD,mOAUC,6BACA,6BACA,kBAACS,EAAA,EAAD,CACCE,QAAQ,WACRD,KAAK,QACLrF,QAAS,WACRsD,IAAQ,GACRV,EAAY,KALd,YE9SW2D,MATf,WACC,OACC,yBAAK/H,UAAU,OACL,kBAAC,EAAD,MACT,kBAAC,EAAD,QCEiBgI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBAC,EAAoBvF,KAAKwF,MAAM1F,aAAa2F,QAAQ,iBAEpDC,EAAe,CACpBvF,SAAU,GACVG,WAAY,EACZG,UAAW,GACXG,UAAW,G,QCCN+E,EAAQC,aDEa,WAGrB,IAFLnG,EAEI,uDAFI8F,GAAwCG,EAChDG,EACI,uCACJ,OAAQA,EAAOxB,MACd,IHhB0B,eGiBzB,OAAO,eACH5E,EADJ,CAECU,SAAU2F,SAASD,EAAOb,IAAI5E,kBAC9BE,WAAYwF,SAASD,EAAOb,IAAIzE,YAChCE,UAAWqF,SAASD,EAAOb,IAAItE,WAC/BE,UAAWkF,SAASD,EAAOb,IAAIpE,aAEjC,QACC,OAAOnB,MCdVsG,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OAEDrC,SAAS2C,eAAe,SFkHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a46dbb67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__rxI95\",\"modal\":\"Settings_modal__2oYPj\",\"title\":\"Settings_title__36Gac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__1a16J\",\"modal\":\"Info_modal__2Qtp7\",\"title\":\"Info_title__2g7qw\"};","module.exports = __webpack_public_path__ + \"static/media/tr.6afbdbf6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__1RRa9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Timer_test__SQMef\"};","module.exports = __webpack_public_path__ + \"static/media/bell.525320df.flac\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__2zw5b\",\"icon\":\"InfoBtn_icon__2qaiX\"};","import React from \"react\";\nimport pic from '../images/tr.png'\nimport './Header.css'\n\nconst Header = () => {\n  // Remove animation effects after user clicks on a widget\n\n  return (\n    <header className=\"logo-title\">\n      <img src={pic}></img>\n      <i>Pomodora</i>\n      <p>&copy; 2021 Argen Duishobekov</p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./TimerDisplay.css\";\n\nconst TimeDisplay = (props) => {\n  const radius = 280;\n  const stroke = 20;\n  const normalizedRadius = radius - stroke * 2;\n  const circumference = normalizedRadius * 2 * Math.PI;\n  const strokeDashoffset =\n    circumference - (props.progress / 100) * circumference;\n\n  return (\n    <div className=\"TimeDisplay\">\n      <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\n        <circle\n          stroke=\"#D9534F\"\n          fill=\"#fff\"\n          strokeWidth={stroke}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n        <circle\n          stroke=\"#ddd\"\n          fill=\"transparent\"\n          strokeWidth={stroke}\n          strokeDasharray={circumference + \" \" + circumference}\n          style={{ strokeDashoffset }}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n      <div>\n        <p>Remaining time</p>\n        <div className=\"Sikl\"></div>\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeDisplay;\n","import React from 'react';\nimport css from './SettingsBtn.module.css';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nconst SettingsBtn = (props) => {\n    return (\n        <button onClick={props.onclick} className={css.btn}>\n            <SettingsIcon fontSize=\"large\"/>\n        </button>\n    )\n}\n\nexport default SettingsBtn;","import React from 'react';\nimport css from './Settings.module.css';\n\nfunction Settings({ title, active, children, onChange }) {\n  if (!active) {\n    return null;\n  }\n  return (\n    <div className={css.backdrop} >\n      <div className={css.modal}>\n        {title && <h2 className={css.title}>{title}</h2>}\n        <div className={css.content}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport css from './InfoBtn.module.css';\nimport InfoIcon from '@material-ui/icons/Info';\n\nconst InfoBtn = (props) => {\n    return (\n        <button onClick={props.onclick} className={css.btn}>\n            <InfoIcon fontSize=\"large\"/>\n        </button>\n    )\n}\n\nexport default InfoBtn;","import React from 'react';\nimport css from './Info.module.css';\n\nfunction Info({ title, active, children, onChange }) {\n  if (!active) {\n    return null;\n  }\n  return (\n    <div className={css.backdrop} >\n      <div className={css.modal}>\n        {title && <h2 className={css.title}>{title}</h2>}\n        <div className={css.content}>{children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Info;\n","import React, { useState, useEffect } from 'react'\nimport TimerDisplay from '../TimerDisplay'\nimport SettingsBtn from '../SettingsBtn'\nimport Settings from '../SettingsModal'\nimport css from './Timer.module.css'\nimport bellSound from '../../audio/bell.flac'\nimport Swal from 'sweetalert2'\nimport InfoBtn from '../InfoBtn'\nimport Info from '../InfoModal'\nimport { Button, FormControlLabel, Checkbox } from '@material-ui/core'\nimport TextField from '@material-ui/core/TextField'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { change_state } from '../../store/action'\n\nfunction Timer() {\n\n\tconst state = useSelector((state) => state)\n\tconst dispatch = useDispatch()\n\n  useEffect(() => {\n    localStorage.setItem('pomodorState', JSON.stringify(state))\n  },[state])\n\n\t// Here are time value hooks\n\tconst [pomodoroInterval, setPomodoroInterval] = useState(state.workTime)\n\tconst [shortBrake, setShortBrake] = useState(state.shortBreak)\n\tconst [longBrake, setLongBreak] = useState(state.longBreak)\n\tconst [pomodoros, setPomodoros] = useState(state.pomodoros)\n\tconst [autoPlay, setAutoPlay] = useState(true)\n\n\t// Hooks for sounds\n\tconst [bell] = useState(new Audio(bellSound))\n\n\t// Other hooks\n\tconst [time, setTime] = useState(pomodoroInterval * 60)\n\tconst [pomodoro, setPomodoro] = useState(1)\n\tconst [restFlag, setRestFlag] = useState(false)\n\tconst [buttonText, setButtonText] = useState('Pause')\n\tconst [startStatus, setStartStatus] = useState(false)\n\n\t// Hooks for Modals\n\tconst [settings, setSettings] = useState(false)\n\tconst [info, setInfo] = useState(false)\n\n\t// Here is a temporary value for progress bar\n\tconst [temporary, setTemporary] = useState(pomodoroInterval)\n\n\tuseEffect(() => {\n\t\tif (startStatus) {\n\t\t\tif (buttonText === 'Pause') {\n\t\t\t\tif (time !== 0) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetTime(time - 1)\n\t\t\t\t\t}, 1000)\n\t\t\t\t} else {\n\t\t\t\t\tbell.play()\n\t\t\t\t\tpomodoroCount()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\tconst start = () => {\n\t\tconsole.log('test')\n\t\tsetStartStatus(true)\n\t}\n\n\tconst minutes = Math.floor(time / 60)\n\tconst seconds = time - minutes * 60\n\n\tfunction pomodoroCount() {\n\t\tlet pomodoroCount = pomodoro\n\t\tlet interval\n\t\tlet flag\n\t\tif (pomodoro < pomodoros && !restFlag) {\n\t\t\tinterval = shortBrake\n\t\t\tflag = true\n\t\t\tsetTemporary(shortBrake)\n\n\t\t\tautoPlay === true &&\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitle: 'Time to have a rest',\n\t\t\t\t\tallowOutsideClick: false,\n\t\t\t\t\tonOpen: () => {\n\t\t\t\t\t\tsetButtonText('Continue')\n\t\t\t\t\t},\n\t\t\t\t\tonClose: () => {\n\t\t\t\t\t\tsetButtonText('Pause')\n\t\t\t\t\t\tblueBg()\n\t\t\t\t\t},\n\t\t\t\t\tallowEnterKey: true,\n\t\t\t\t\tconfirmButtonColor: 'red',\n\t\t\t\t})\n\t\t} else if (pomodoro < pomodoros && restFlag) {\n\t\t\tpomodoroCount = pomodoro + 1\n\t\t\tinterval = pomodoroInterval\n\t\t\tflag = false\n\t\t\tsetTemporary(pomodoroInterval)\n\n\t\t\tautoPlay === true &&\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitle: 'Time to work',\n\t\t\t\t\tallowOutsideClick: false,\n\t\t\t\t\tonOpen: () => {\n\t\t\t\t\t\tsetButtonText('Continue')\n\t\t\t\t\t},\n\t\t\t\t\tonClose: () => {\n\t\t\t\t\t\tsetButtonText('Pause')\n\t\t\t\t\t\tredBg()\n\t\t\t\t\t},\n\t\t\t\t\tallowEnterKey: true,\n\t\t\t\t\tconfirmButtonColor: 'blue',\n\t\t\t\t})\n\t\t} else if (pomodoro >= pomodoros) {\n\t\t\tpomodoroCount = 1\n\t\t\tinterval = longBrake\n\t\t\tflag = true\n\t\t\tsetTemporary(longBrake)\n\t\t\tblueBg()\n\n\t\t\tautoPlay === true &&\n\t\t\t\tSwal.fire({\n\t\t\t\t\ttitle: 'Time to have the longest break',\n\t\t\t\t\tallowOutsideClick: false,\n\t\t\t\t\tonOpen: () => {\n\t\t\t\t\t\tsetButtonText('Continue')\n\t\t\t\t\t},\n\t\t\t\t\tonClose: () => {\n\t\t\t\t\t\tsetButtonText('Pause')\n\t\t\t\t\t},\n\t\t\t\t\tallowEnterKey: true,\n\t\t\t\t\tconfirmButtonColor: 'red',\n\t\t\t\t})\n\t\t}\n\t\tsetPomodoro(pomodoroCount)\n\t\tsetTime(interval * 60)\n\t\tsetRestFlag(flag)\n\t}\n\n\tfunction pauseAndResume() {\n\t\tlet newText\n\t\tif (buttonText === 'Pause') {\n\t\t\tnewText = 'Continue'\n\t\t} else {\n\t\t\tnewText = 'Pause'\n\t\t}\n\t\tsetButtonText(newText)\n\t}\n\n\t// Func for progress bar\n\tconst getProgress = () => {\n\t\tconst current = time\n\t\tconst total = temporary * 60\n\t\treturn ((total - current) / total) * 100\n\t}\n\n\tconst onModal = () => {\n\t\treturn setSettings(true)\n\t}\n\n\tconst onInfo = () => {\n\t\treturn setInfo(true)\n\t}\n\n\tconst onCheckBox = () => {\n\t\treturn setAutoPlay(!autoPlay)\n\t}\n\n\tconst reset = () => {\n\t\tif (buttonText === 'Continue') {\n\t\t\tsetStartStatus(false)\n\t\t\tsetRestFlag(false)\n\t\t\tsetTime(temporary * 60)\n\t\t\tsetButtonText('Pause')\n\t\t}\n\t}\n\n\t// Func for changing bg Color while a break\n\tconst blueBg = () => {\n\t\tdocument.body.classList.remove('restout')\n\t\tdocument.body.classList.add('workout')\n\t}\n\n\tconst redBg = () => {\n\t\tdocument.body.classList.remove('workout')\n\t\tdocument.body.classList.add('restout')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<InfoBtn onclick={onInfo} />\n\t\t\t<SettingsBtn onclick={onModal} />\n\n\t\t\t<TimerDisplay time={pomodoroInterval} progress={getProgress()}>\n\t\t\t\t<h2 className={css.test}>\n\t\t\t\t\t{minutes < 10 ? `0${minutes}` : minutes} :{' '}\n\t\t\t\t\t{seconds < 10 ? `0${seconds}` : seconds}\n\t\t\t\t</h2>\n\t\t\t</TimerDisplay>\n\t\t\t<br />\n\n\t\t\t{startStatus ? (\n\t\t\t\t<div>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize='large'\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tonClick={pauseAndResume}\n\t\t\t\t\t>\n\t\t\t\t\t\t{buttonText}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize='large'\n\t\t\t\t\t\ttitle='Click <Pause> to reset'\n\t\t\t\t\t\tonClick={reset}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<Button variant='outlined' onClick={start} size='large'>\n\t\t\t\t\tStart\n\t\t\t\t</Button>\n\t\t\t)}\n\n\t\t\t<Settings active={settings} onChange={onModal}>\n\t\t\t\t<h3>Settings</h3>\n\t\t\t\t<div>Pomodoro</div>\n\t\t\t\t<TextField\n\t\t\t\t\tid='standard-basic'\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\ttype='number'\n\t\t\t\t\tfullWidth\n\t\t\t\t\tvalue={pomodoroInterval}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetPomodoroInterval(e.target.value)\n\t\t\t\t\t\tsetTime(e.target.value * 60)\n\t\t\t\t\t\tsetTemporary(e.target.value)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<div>Short Break</div>\n\t\t\t\t<TextField\n\t\t\t\t\tid='standard-basic'\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\tfullWidth\n\t\t\t\t\tvalue={shortBrake}\n\t\t\t\t\tonChange={(e) => setShortBrake(e.target.value)}\n\t\t\t\t\ttype='number'\n\t\t\t\t/>\n\n\t\t\t\t<div>Long Break</div>\n\t\t\t\t<TextField\n\t\t\t\t\tid='standard-basic'\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\tfullWidth\n\t\t\t\t\tvalue={longBrake}\n\t\t\t\t\tonChange={(e) => setLongBreak(e.target.value)}\n\t\t\t\t\ttype='number'\n\t\t\t\t/>\n\n\t\t\t\t<div>Pomodoro Count</div>\n\t\t\t\t<TextField\n\t\t\t\t\tid='standard-basic'\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\tfullWidth\n\t\t\t\t\tvalue={pomodoros}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetPomodoros(e.target.value)\n\t\t\t\t\t\tconsole.log('count')\n\t\t\t\t\t}}\n\t\t\t\t\ttype='number'\n\t\t\t\t/>\n\n\t\t\t\t<FormControlLabel\n\t\t\t\t\tcontrol={\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={autoPlay}\n\t\t\t\t\t\t\tonChange={onCheckBox}\n\t\t\t\t\t\t\tvalue='checkedA'\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tlabel='Auto Play without push notifications'\n\t\t\t\t/>\n\t\t\t\t<br />\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\tsize='large'\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tchange_state({\n\t\t\t\t\t\t\t\tpomodoroInterval,\n\t\t\t\t\t\t\t\tlongBrake,\n\t\t\t\t\t\t\t\tshortBrake,\n\t\t\t\t\t\t\t\tpomodoros,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t\tsetSettings(false)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tAll ok\n\t\t\t\t</Button>\n\t\t\t</Settings>\n\n\t\t\t<Info active={info} onChange={onInfo}>\n\t\t\t\t<h2>About Pomodoro Technique</h2>\n\t\t\t\tLorem ipsum dolor sit, amet consectetur adipisicing elit. Nihil\n\t\t\t\tlabore sit quas nam repellat perspiciatis autem, distinctio\n\t\t\t\tsuscipit ex, quae in fuga?\n\t\t\t\t<h2>Use Experience</h2>\n\t\t\t\tLorem ipsum dolor sit amet consectetur adipisicing elit.\n\t\t\t\tReiciendis aliquid cupiditate fugiat velit? Quam explicabo\n\t\t\t\tconsequuntur, odio non qui recusandae vitae dolore nam odit eius\n\t\t\t\tmaxime maiores voluptate quaerat provident?\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<Button\n\t\t\t\t\tvariant='outlined'\n\t\t\t\t\tsize='large'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetInfo(false)\n\t\t\t\t\t\tsetPomodoro(1)\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tClose\n\t\t\t\t</Button>\n\t\t\t</Info>\n\t\t</div>\n\t)\n}\n\nexport default Timer\n","export const CHANGE_STATE = 'CHANGE_STATE'\n\nexport const change_state = (obj) => ({\n    type: CHANGE_STATE,\n    obj\n})","import React from 'react'\nimport './App.css'\nimport Header from './components/Header'\nimport Timer from './components/Timer/index'\n\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n            <Header/>\n\t\t\t<Timer />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_STATE } from './action'\n\nconst localPomodorState = JSON.parse(localStorage.getItem('pomodorState'))\n\nconst initialState = {\n\tworkTime: 25,\n\tshortBreak: 5,\n\tlongBreak: 10,\n\tpomodoros: 4,\n}\n\nexport const rootReducer = (\n\tstate = localPomodorState ? localPomodorState : initialState,\n\taction,\n) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_STATE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tworkTime: parseInt(action.obj.pomodoroInterval),\n\t\t\t\tshortBreak: parseInt(action.obj.shortBrake),\n\t\t\t\tlongBreak: parseInt(action.obj.longBrake),\n\t\t\t\tpomodoros: parseInt(action.obj.pomodoros),\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { rootReducer } from './store/reducer'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}